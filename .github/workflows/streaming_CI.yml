name: Streaming CI

on:
  push:
    branches:
      - master

jobs:
  continuous_integration:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Postgres
      - name: Start Postgres
        run: |
          cd postgres
          docker compose -p postgres_streaming up -d --build

      # Monitoring
      - name: Start Monitoring
        run: |
          cd monitoring
          
          # Generate a temporary .env file
          echo "GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }}" >> .env
          echo "GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}" >> .env
          echo "GF_SMTP_ENABLED=${{ vars.GF_SMTP_ENABLED }}" >> .env
          echo "GF_SMTP_HOST=${{ vars.GF_SMTP_HOST }}" >> .env
          echo "GF_SMTP_FROM_NAME=${{ vars.GF_SMTP_FROM_NAME }}" >> .env
          echo "RECEIVER=${{ secrets.RECEIVER }}" >> .env
          
          docker compose -p monitoring_streaming up -d --build

      # Spark
      - name: Start Spark
        run: |
          cd spark
          docker compose -p spark_streaming up -d --build

      # Mailhog
      - name: Start Mailhog
        run: |
          cd mailhog
          docker compose -p mailhog_streaming up -d --build

      # Airflow
      - name: Start Airflow
        run: |
          cd airflow

          # Generate a temporary .env file
          echo "AIRFLOW_UID=${{ vars.AIRFLOW_UID }}" > .env
          echo "PG_HOST=${{ vars.PG_HOST }}" >> .env
          echo "PG_PORT=${{ vars.PG_PORT }}" >> .env
          echo "PG_DBNAME=${{ vars.PG_DBNAME }}" >> .env
          echo "PG_USER=${{ vars.PG_USER }}" >> .env
          echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> .env
          echo "AIRFLOW_CONN_MY_POSTGRES=${{ vars.AIRFLOW_CONN_MY_POSTGRES }}" >> .env
          echo "SPARK_HOST=${{ vars.SPARK_HOST }}" >> .env
          echo "SPARK_PORT=${{ vars.SPARK_PORT }}" >> .env
          echo "SPARK_PARAM=${{ vars.SPARK_PARAM }}" >> .env
          echo "AIRFLOW_CONN_MY_SPARK=${{ vars.AIRFLOW_CONN_MY_SPARK }}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env
          echo "SMTP_SERVER=${{ vars.SMTP_SERVER }}" >> .env
          echo "SMTP_PORT=${{ vars.SMTP_PORT }}" >> .env
          echo "RECEIVER=${{ vars.RECEIVER }}" >> .env

          docker compose -p airflow_streaming up -d --build

      # Ingestion
      - name: Start Ingestion
        run: |
          cd ingestion

          # Generate a temporary .env file
          echo "PG_HOST=${{ vars.PG_HOST }}" > .env
          echo "PG_PORT=${{ vars.PG_PORT }}" >> .env
          echo "PG_DBNAME=${{ vars.PG_DBNAME }}" >> .env
          echo "PG_USER=${{ vars.PG_USER }}" >> .env
          echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> .env

          docker build -t ingestion_streaming .
          docker run -d --name ingestion_streaming --network postgres_streaming_default --env-file .env ingestion_streaming

      # Run Unit Tests inside the Ingestion Docker container
      - name: Run Ingestion Unit Tests
        run: |
          docker exec ingestion_streaming python -m pytest -v -s tests/
